/* The following code was generated by JFlex 1.6.1 */

/*Fantom lexical analyzer
 *	Writen by mehran rafiee
 *	student id =940122610025
 */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/ProgramingTraining/CompilerDesign/Fantom/fantom_lexical_analyzer.flex</tt>
 */
public class FantomScanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\10\0\2\5\1\2\1\13\1\13\1\1\22\0\1\25\1\42\1\20" +
                    "\1\41\1\21\2\0\1\12\1\31\1\32\1\40\1\64\1\43\1\6" +
                    "\1\14\1\37\1\7\11\4\1\63\1\44\1\26\1\62\1\30\2\0" +
                    "\5\11\1\16\14\3\1\22\2\3\1\52\1\3\1\10\2\3\1\35" +
                    "\1\17\1\36\1\0\1\4\1\0\1\57\1\11\1\45\1\54\1\15" +
                    "\1\55\1\3\1\46\1\53\2\3\1\56\1\3\1\50\1\47\2\3" +
                    "\1\24\1\51\1\23\1\61\1\52\1\60\1\10\2\3\1\33\1\27" +
                    "\1\34\7\0\1\13\u1fa2\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\1\1\4\1\1" +
                    "\1\5\1\3\1\6\2\3\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\2\1\1\17\1\20\1\21" +
                    "\5\3\1\22\1\1\1\23\2\0\1\24\1\0\1\4" +
                    "\2\0\1\3\1\0\1\3\3\6\1\25\1\6\2\3" +
                    "\1\26\1\27\1\30\2\0\2\30\1\31\6\3\1\32" +
                    "\1\33\1\34\2\0\1\4\2\3\2\6\1\35\1\25" +
                    "\2\0\1\6\2\3\1\0\2\3\1\36\2\3\1\24" +
                    "\1\6\1\35\3\0\4\3\2\0\2\3\4\0\1\35";

    private static int[] zzUnpackAction() {
        int[] result = new int[107];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\65\0\65\0\152\0\237\0\324\0\u0109\0\u013e" +
                    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\65" +
                    "\0\65\0\65\0\65\0\65\0\65\0\u02e6\0\u031b\0\u0350" +
                    "\0\65\0\65\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e" +
                    "\0\u04c3\0\u04f8\0\u0173\0\u052d\0\65\0\u0562\0\u0597\0\u05cc" +
                    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774" +
                    "\0\u07a9\0\u07de\0\u0813\0\65\0\65\0\u0848\0\u087d\0\u031b" +
                    "\0\u08b2\0\65\0\65\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb" +
                    "\0\u09f0\0\65\0\65\0\65\0\u0a25\0\u0a5a\0\65\0\u0a8f" +
                    "\0\u0ac4\0\u0af9\0\u0b2e\0\65\0\u06d5\0\u0774\0\u0b63\0\u0b98" +
                    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\152\0\u0cd6\0\u0d0b" +
                    "\0\152\0\u0d40\0\u070a\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49" +
                    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1" +
                    "\0\u1026\0\u105b\0\u0ff1";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[107];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\3\1\6\1\7\2\4" +
                    "\1\10\1\2\1\11\1\12\1\4\1\2\1\13\1\2" +
                    "\1\14\1\4\1\15\1\3\1\16\1\2\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27" +
                    "\1\30\1\31\1\32\1\33\2\4\1\34\1\35\1\36" +
                    "\2\4\1\37\4\4\1\40\1\41\1\42\70\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\3\4\20\0\15\4" +
                    "\7\0\1\5\2\0\1\5\4\0\1\43\1\44\1\45" +
                    "\36\0\1\45\13\0\1\5\2\0\1\5\4\0\1\43" +
                    "\1\46\53\0\1\5\2\0\1\5\1\47\3\0\1\43" +
                    "\1\44\1\45\36\0\1\45\7\0\1\50\2\0\10\50" +
                    "\1\0\51\50\4\0\1\51\2\0\1\51\5\0\1\46" +
                    "\52\0\1\4\1\52\1\0\1\53\1\52\2\4\3\0" +
                    "\2\4\3\0\3\4\20\0\1\54\14\4\2\0\1\53" +
                    "\1\55\2\0\10\55\1\56\3\55\1\57\1\60\1\61" +
                    "\43\55\3\0\2\4\2\0\3\4\3\0\2\4\3\0" +
                    "\1\4\1\62\1\4\20\0\15\4\6\0\2\4\2\0" +
                    "\3\4\3\0\1\63\1\4\3\0\3\4\20\0\15\4" +
                    "\65\0\1\64\64\0\1\65\41\0\1\66\1\67\24\0" +
                    "\1\70\1\71\1\72\62\70\62\0\1\73\5\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\3\4\20\0\2\4" +
                    "\1\74\6\4\1\75\3\4\6\0\2\4\2\0\3\4" +
                    "\3\0\1\76\1\4\3\0\3\4\20\0\15\4\6\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\1\4\1\77" +
                    "\1\4\20\0\15\4\6\0\2\4\2\0\3\4\3\0" +
                    "\2\4\3\0\3\4\20\0\2\4\1\100\12\4\6\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\3\4\20\0" +
                    "\2\4\1\101\12\4\65\0\1\102\64\0\1\103\6\0" +
                    "\1\5\2\0\1\5\4\0\1\43\1\46\46\0\1\104" +
                    "\4\0\1\105\1\0\1\106\1\105\54\0\1\106\4\0" +
                    "\1\106\1\0\1\53\1\106\54\0\1\53\4\0\1\47" +
                    "\2\0\1\47\1\0\1\47\3\0\2\47\26\0\1\47" +
                    "\6\0\2\47\1\0\1\47\17\0\1\107\56\0\1\51" +
                    "\2\0\1\51\5\0\1\44\1\45\36\0\1\45\12\0" +
                    "\1\4\1\110\2\0\1\110\2\4\3\0\2\4\3\0" +
                    "\3\4\20\0\15\4\7\0\1\106\2\0\1\106\60\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\3\4\20\0" +
                    "\1\4\1\111\13\4\3\0\1\55\2\0\10\55\1\56" +
                    "\3\55\1\57\1\60\1\112\43\55\1\56\2\0\14\56" +
                    "\1\113\1\114\44\56\1\55\2\0\10\55\1\56\3\55" +
                    "\1\57\1\115\1\112\43\55\1\116\2\0\10\116\1\0" +
                    "\4\116\1\60\1\117\43\116\1\55\2\0\1\120\4\55" +
                    "\2\120\1\55\1\56\1\55\2\120\1\57\1\60\1\112" +
                    "\3\120\20\55\15\120\3\55\3\0\2\4\2\0\3\4" +
                    "\3\0\2\4\3\0\2\4\1\121\20\0\15\4\6\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\1\4\1\122" +
                    "\1\4\20\0\15\4\3\0\1\66\1\71\1\72\62\66" +
                    "\40\67\1\123\24\67\2\0\1\72\65\0\2\4\2\0" +
                    "\3\4\3\0\2\4\3\0\3\4\20\0\3\4\1\124" +
                    "\11\4\6\0\2\4\2\0\3\4\3\0\2\4\3\0" +
                    "\3\4\20\0\12\4\1\125\2\4\6\0\2\4\2\0" +
                    "\3\4\3\0\2\4\3\0\3\4\20\0\13\4\1\126" +
                    "\1\4\6\0\2\4\2\0\3\4\3\0\2\4\3\0" +
                    "\3\4\20\0\12\4\1\127\2\4\6\0\2\4\2\0" +
                    "\3\4\3\0\2\4\3\0\3\4\20\0\6\4\1\130" +
                    "\6\4\6\0\2\4\2\0\3\4\3\0\2\4\3\0" +
                    "\2\4\1\126\20\0\15\4\7\0\1\105\2\0\1\105" +
                    "\6\0\1\45\36\0\1\45\13\0\1\105\2\0\1\105" +
                    "\60\0\1\4\1\110\2\0\1\110\2\4\3\0\1\4" +
                    "\1\131\3\0\3\4\20\0\10\4\1\131\4\4\6\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\3\4\20\0" +
                    "\2\4\1\126\12\4\3\0\1\55\2\0\1\132\4\55" +
                    "\2\132\1\55\1\56\1\55\2\132\1\57\1\60\1\112" +
                    "\3\132\20\55\15\132\3\55\1\56\2\0\14\56\1\113" +
                    "\1\133\44\56\1\116\2\0\1\134\4\116\2\134\1\116" +
                    "\1\0\1\116\2\134\1\116\1\60\1\117\3\134\20\116" +
                    "\15\134\3\116\1\55\1\135\1\0\2\120\2\55\3\120" +
                    "\1\55\1\56\1\55\2\120\1\57\1\60\1\112\3\120" +
                    "\20\55\15\120\3\55\3\0\2\4\2\0\3\4\3\0" +
                    "\2\4\3\0\3\4\1\136\17\0\15\4\6\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\3\4\20\0\14\4" +
                    "\1\137\3\0\37\67\1\72\1\123\24\67\3\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\3\4\20\0\4\4" +
                    "\1\140\10\4\6\0\2\4\2\0\3\4\3\0\2\4" +
                    "\3\0\3\4\20\0\4\4\1\141\10\4\6\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\1\4\1\142\1\4" +
                    "\20\0\15\4\6\0\2\4\2\0\3\4\3\0\2\4" +
                    "\3\0\3\4\20\0\7\4\1\126\5\4\3\0\1\55" +
                    "\1\143\1\0\2\132\2\55\3\132\1\55\1\56\1\55" +
                    "\2\132\1\57\1\60\1\112\3\132\20\55\15\132\3\55" +
                    "\1\116\1\143\1\0\2\134\2\116\3\134\1\116\1\0" +
                    "\1\116\2\134\1\116\1\60\1\117\3\134\20\116\15\134" +
                    "\4\116\2\0\10\116\1\0\51\116\25\0\1\136\1\144" +
                    "\41\0\2\4\2\0\3\4\3\0\2\4\3\0\2\4" +
                    "\1\145\20\0\15\4\6\0\2\4\2\0\3\4\3\0" +
                    "\2\4\3\0\1\4\1\126\1\4\20\0\15\4\6\0" +
                    "\2\4\2\0\3\4\3\0\2\4\3\0\3\4\20\0" +
                    "\4\4\1\126\10\4\6\0\2\4\2\0\3\4\3\0" +
                    "\2\4\3\0\3\4\20\0\6\4\1\146\6\4\3\0" +
                    "\1\116\2\0\10\116\1\0\4\116\1\60\1\147\43\116" +
                    "\27\0\1\150\40\0\2\4\2\0\3\4\3\0\2\4" +
                    "\3\0\3\4\20\0\3\4\1\126\11\4\6\0\2\4" +
                    "\2\0\3\4\3\0\2\4\3\0\3\4\20\0\1\126" +
                    "\14\4\3\0\1\116\2\0\1\151\4\116\2\151\1\116" +
                    "\1\0\1\116\2\151\1\116\1\60\1\117\3\151\20\116" +
                    "\15\151\3\116\1\150\2\0\10\150\1\0\13\150\1\152" +
                    "\35\150\1\116\1\135\1\0\2\151\2\116\3\151\1\116" +
                    "\1\0\1\116\2\151\1\116\1\60\1\117\3\151\20\116" +
                    "\15\151\3\116\1\150\2\0\10\150\1\0\13\150\1\152" +
                    "\1\153\34\150";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4240];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\11\14\1\6\11\3\1\2\11\10\1\2\0" +
                    "\1\11\1\0\1\1\2\0\1\1\1\0\10\1\2\11" +
                    "\1\1\2\0\1\1\2\11\6\1\3\11\2\0\1\11" +
                    "\4\1\1\11\1\1\2\0\3\1\1\0\10\1\3\0" +
                    "\4\1\2\0\2\1\4\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[107];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public enum Token {

        KEYWORD,
        IDENTIFIER,
        OPERATOR,
        INTEGER,
        FLOAT,
        STRING,
        COMMENT,
        WHITESPACE,
        DELIMITER,
        SEMICOLON,
        COMMA,
        DOT,
        LT,
        GT,
        LPAREN,
        RPAREN,
        LBRACE,
        RBRACE,
        LBRACK,
        RBRACK,
        NOT,
        EQ,
        PLUS,
        LTEQ,
        GTEQ,
        NOTEQ,
        EQEQ,
        DEF,
        PPLUS,
        ERROR
    }


    private String token(String text, Token token) {
        return "<" + text + "-" + token + " -L : " + yyline + " - C : " + yycolumn + ">";
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public FantomScanner(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 186) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        System.out.print(yytext());
                    }
                    case 31:
                        break;
                    case 2: { /*ignore*/
                    }
                    case 32:
                        break;
                    case 3: {
                        System.out.println(token(yytext(), Token.IDENTIFIER));
                    }
                    case 33:
                        break;
                    case 4: {
                        System.out.println(token(yytext(), Token.INTEGER));
                    }
                    case 34:
                        break;
                    case 5: {
                        System.out.println(token(yytext(), Token.DOT));
                    }
                    case 35:
                        break;
                    case 6: {
                        System.out.println(token(yytext(), Token.ERROR));
                    }
                    case 36:
                        break;
                    case 7: {
                        System.out.println(token(yytext(), Token.LT));
                    }
                    case 37:
                        break;
                    case 8: {
                        System.out.println(token(yytext(), Token.GT));
                    }
                    case 38:
                        break;
                    case 9: {
                        System.out.println(token(yytext(), Token.LPAREN));
                    }
                    case 39:
                        break;
                    case 10: {
                        System.out.println(token(yytext(), Token.RPAREN));
                    }
                    case 40:
                        break;
                    case 11: {
                        System.out.println(token(yytext(), Token.LBRACE));
                    }
                    case 41:
                        break;
                    case 12: {
                        System.out.println(token(yytext(), Token.RBRACE));
                    }
                    case 42:
                        break;
                    case 13: {
                        System.out.println(token(yytext(), Token.LBRACK));
                    }
                    case 43:
                        break;
                    case 14: {
                        System.out.println(token(yytext(), Token.RBRACK));
                    }
                    case 44:
                        break;
                    case 15: {
                        System.out.println(token(yytext(), Token.NOT));
                    }
                    case 45:
                        break;
                    case 16: {
                        System.out.println(token(yytext(), Token.COMMA));
                    }
                    case 46:
                        break;
                    case 17: {
                        System.out.println(token(yytext(), Token.SEMICOLON));
                    }
                    case 47:
                        break;
                    case 18: {
                        System.out.println(token(yytext(), Token.EQ));
                    }
                    case 48:
                        break;
                    case 19: {
                        System.out.println(token(yytext(), Token.PLUS));
                    }
                    case 49:
                        break;
                    case 20: {
                        System.out.println(token(yytext(), Token.FLOAT));
                    }
                    case 50:
                        break;
                    case 21: {
                        String text = yytext();
                        while (text.contains("$")) {
                            int index = text.indexOf("$");
                            String tmp = text.substring(0, index);
                            if (tmp.equals("\\$"))
                                continue;
                            text = text.substring(tmp.length() + 1, text.length());

                            System.out.println(token((!tmp.startsWith("\"") ? "\"" : "")
                                    + tmp
                                    + (!tmp.endsWith("\"") ? "\"" : ""), Token.STRING));
                            System.out.println(token("+", Token.OPERATOR));
                            String tmp2 = text.split(" ")[0];
                            System.out.println(token(tmp2, Token.IDENTIFIER));
                            text = text.substring(tmp2.length(), text.length());
                        }
                        if (text.length() > 0)
                            System.out.println(token(text, Token.STRING));
                    }
                    case 51:
                        break;
                    case 22: {
                        System.out.println(token(yytext(), Token.LTEQ));
                    }
                    case 52:
                        break;
                    case 23: {
                        System.out.println(token(yytext(), Token.GTEQ));
                    }
                    case 53:
                        break;
                    case 24: {
                        System.out.println(token(yytext(), Token.COMMENT));
                    }
                    case 54:
                        break;
                    case 25: {
                        System.out.println(token(yytext(), Token.NOTEQ));
                    }
                    case 55:
                        break;
                    case 26: {
                        System.out.println(token(yytext(), Token.EQEQ));
                    }
                    case 56:
                        break;
                    case 27: {
                        System.out.println(token(yytext(), Token.DEF));
                    }
                    case 57:
                        break;
                    case 28: {
                        System.out.println(token(yytext(), Token.PPLUS));
                    }
                    case 58:
                        break;
                    case 29: {
                        System.out.println(token(yytext(), Token.STRING));
                    }
                    case 59:
                        break;
                    case 30: {
                        System.out.println(token(yytext(), Token.KEYWORD));
                    }
                    case 60:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This is a standalone scanner, it will print any unmatched
     * text to System.out unchanged.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java FantomScanner [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                FantomScanner scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new FantomScanner(reader);
                    while (!scanner.zzAtEOF) scanner.yylex();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
